How did viewing a diff between two versions of a file help you see the bug that was introduced?

It reduced the number the lines I had to check for the typo to only the new ones marked with a "+" sign.

------
How could having easy access to the entire history of a file make you a more efficient programmer in the long term?

You can easily recover any point in time of the file from which the development went wrong.

------
What do you think are the pros and cons of manually choosing when to create a commit, like you do in Git, vs having versions automatically saved, like Google Docs does?

PROS: commits can have logical meaning regarding code changes, you can also include an associated message to understand them

CONS: the responsibility is on the user, and the user may forget to commit

------
Why do you think some version control systems, like Git, allow saving multiple files in one commit, while others, like Google Docs, treat each file separately?

Because Git assumes that there is a logical relation between the files as being part of a project, and that changes in the individual files may correspond to logical challenges in the project spannning accross multiple files, whereas other systems, like Google Docs, consider files individually, as if unrelated.

------
How can you use the commands git log and git diff to view the history of files?

With git log you can view the history of commits, the files that changed in that commit and the date and time the commit was made.

With git diff you inspect the changes in the files in one commit from another commit.

------
How might using version control make you more confident to make changes that could break something?

Because it allows to revert back to a working version without the bug

-------
Now that you have your workspace set up, what do you want to try using Git for?

I plan to use for my coding projects, and maybe some latex projects too.

-------